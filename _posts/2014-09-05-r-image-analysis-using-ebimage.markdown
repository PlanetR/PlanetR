---
title: "R: Image Analysis using EBImage"
kind: article
created_at: 2014-09-05 12:55:00 UTC
author: Alstatr
categories: 
tags: 
layout: post
---
<div dir="ltr" style="text-align: left;" trbidi="on"><div dir="ltr" style="text-align: left;" trbidi="on"><div dir="ltr" style="text-align: left;" trbidi="on"><div dir="ltr" style="text-align: left;" trbidi="on">Currently, I am taking <i>Statistics for Image Analysis</i> on my masteral, and have been exploring this topic in R. One package that has the capability in this field is the <a href="http://www.bioconductor.org/packages/release/bioc/html/EBImage.html" target="_blank">EBImage</a> from <a href="http://www.bioconductor.org/" target="_blank">Bioconductor</a>, which will be showcased in this post.<br /><br /><h3>Installation</h3><br /><script src="https://gist.github.com/alstat/83573359af6c57dcea4f.js"></script>For those using Ubuntu, you may likely to encounter this error:<br /><br /><script src="https://gist.github.com/alstat/3bec32e1ad17515d7b3a.js"></script>It has something to do with the <code>tiff.h</code> <a href="http://en.wikipedia.org/wiki/Include_directive" target="_blank">C header file</a>, but it's not that serious since <a href="http://mytechscribblings.wordpress.com/" target="_blank">mytechscribblings</a> has an effective <a href="http://mytechscribblings.wordpress.com/2013/06/28/installing-ebimage-package-for-r-using-rstudio-in-ubuntu/" target="_blank">solution</a> for this, do check that out.<br /><br /><h3>Importing Data</h3>To import a raw image, consider the following codes:<br /><a name='more'></a><br /><script src="https://gist.github.com/alstat/40778c752b73d5de4186.js"></script><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-aU5Ekm0dy3w/VAHQnqK4y9I/AAAAAAAABzo/HJsl0LGi7kk/s1600/tinago.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-aU5Ekm0dy3w/VAHQnqK4y9I/AAAAAAAABzo/HJsl0LGi7kk/s1600/tinago.JPG" height="300" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(Image)</code>.</td></tr></tbody></table>Yes, this is the photo that we are going to use for our analysis. Needless to say, that's me and my friends. In the proceeding section we will do image manipulation and other processing. <br /><br /><h3>Image Properties</h3>So what do we get from our raw image? To answer that, simply run <code>print(Image)</code>. This will return the properties of the image, including the array of pixel values. With these information, we apply mathematical and statistical operations to do enhancement on the image.<br /><br /><script src="https://gist.github.com/alstat/abd3f84e2eb19fea58f9.js"></script>There are two sections (Summary and array of the pixels) in the above output, with the following entries for the first section:<br /><br /><div class="datagrid"><table><thead><tr><th>Code</th><th>Value</th><th>Description</th></tr></thead><tfoot><tr><td colspan="3" style="text-align: center;"><div id="paging"><i>Table 1: Information from 1st section of <code>print(Image)</code>.</i></div></td></tr></tfoot><tbody><tr><td><code>colormode</code></td><td>Color</td><td>The type (Color/Grayscale) of the color of the image.</td></tr><tr class="alt"><td><code>storage.mode</code></td><td>double</td><td>Type of values in the array.</td></tr><tr><td><code>dim</code></td><td>1984 1488 3</td><td>Dimension of the array, (x, y, z).</td></tr><tr class="alt"><td><code>nb.total.frames:</code></td><td>3</td><td>Number of channels in each pixel, z entry in <code>dim</code>.</td></tr><tr><td><code>nb.render.frames</code></td><td>1</td><td>Number of channels rendered.</td></tr></tbody></table></div><br />The second section is the obtained values from mapping pixels in the image to the real line between 0 and 1 (inclusive). Both extremes of this interval [0, 1], are black and white colors, respectively. Hence, pixels with values closer to any of these end points are expected to be darker or lighter, respectively. And because pixels are contained in a large array, then we can do all matrix manipulations available in R for processing. <br /><br /><h3>Adjusting Brightness</h3>It is better to start with the basic first, one of which is the brightness. As discussed above, brightness can be manipulated using <code>+</code> or <code>-</code>:<br /><br /><script src="https://gist.github.com/alstat/9994581ad659b5fdb124.js"></script><div class="datagrid"><table><thead><tr><th>Lighter</th><th>Darker</th></tr></thead><tfoot><tr><td colspan="3" style="text-align: center;"><div id="paging"><i>Table 2: Adjusting Brightness.</i></div></td></tr></tfoot><tbody><tr><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://2.bp.blogspot.com/-JsJ7dJpYa2s/VAMBpD4dGiI/AAAAAAAAB0U/bVrNeRZ8JXI/s200/Image3.png" style="margin-left: auto; margin-right: auto;" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(Image1)</code>.</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div></td><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://1.bp.blogspot.com/-UUeVdzjEYHQ/VAMB12MtqnI/AAAAAAAAB0c/tTJIfzOLGgI/s200/Image2.png" style="margin-left: auto; margin-right: auto;" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(Image2)</code>.</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div></td></tr></tbody></table></div><br /><h3>Adjusting Contrast</h3>Contrast can be manipulated using multiplication operator(<code>*</code>): <br /><br /><script src="https://gist.github.com/alstat/5ece4021aeef8c08d38d.js"></script><div class="datagrid"><table><thead><tr><th>Low</th><th>High</th></tr></thead><tfoot><tr><td colspan="3" style="text-align: center;"><div id="paging"><i>Table 3: Adjusting Contrast.</i></div></td></tr></tfoot><tbody><tr><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://2.bp.blogspot.com/-i1FyKHWzVOM/VAMI6-a2gWI/AAAAAAAAB0s/VlpkNUPwPJE/s200/Image4.png" style="margin-left: auto; margin-right: auto;" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(Image3)</code>.</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div></td><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://2.bp.blogspot.com/-Qnmx9fToGaw/VAMJGEJ-p5I/AAAAAAAAB00/Xv1gbcqJPAs/s200/Image5.png" style="margin-left: auto; margin-right: auto;" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(Image4)</code>.</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div></td></tr></tbody></table></div><br /><h3>Gamma Correction</h3>Gamma correction is the name of a nonlinear operation used to code and decode luminance or tristimulus values in video or still image systems, defined by the following power-law expression: \begin{equation}\nonumber V_{\mathrm{out}} = AV_{\mathrm{in}}^{\gamma} \end{equation} where $A$ is a constant and the input and output values are non-negative real values; in the common case of $A = 1$, inputs and outputs are typically in the range 0-1. A gamma value $\gamma&lt; 1$ is sometimes called an <b>encoding gamma</b> (Wikipedia, Ref. 1).<br /><br /><script src="https://gist.github.com/alstat/24632941aba052c44641.js"></script><div class="datagrid"><table><thead><tr><th>$\gamma = 2$</th><th>$\gamma = 0.7$</th></tr></thead><tfoot><tr><td colspan="3" style="text-align: center;"><div id="paging"><i>Table 4: Adjusting Gamma Correction.</i></div></td></tr></tfoot><tbody><tr><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://1.bp.blogspot.com/-Rxqi8jvOOug/VAMQmXXkxZI/AAAAAAAAB1I/SStU8diQO4U/s200/Image6.png" style="margin-left: auto; margin-right: auto;" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(Image5)</code>.</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div></td><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://4.bp.blogspot.com/-xjtN-snXoZA/VAMQlW1JdjI/AAAAAAAAB1E/5GQY8yG0D9c/s200/Image7.png" style="margin-left: auto; margin-right: auto;" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(Image6)</code>.</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div></td></tr></tbody></table></div></div><br /><h3>Cropping</h3>Slicing array of pixels, simply mean cropping the image. <br /><br /><script src="https://gist.github.com/alstat/8a5b5cf36dc74be36574.js"></script><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-gBgEMu2lyl4/VAMZUDsTO6I/AAAAAAAAB1k/aBr4ADJHo1k/s1600/Image8.png" height="187" style="margin-left: auto; margin-right: auto;" width="320" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of the above code.</td></tr></tbody></table><div class="separator" style="clear: both; text-align: center;"></div><h3>Spatial Transformation</h3>Spatial manipulation like rotate (<code>rotate</code>), flip (<code>flip</code>), and translate (<code>translate</code>) are also available in the package. Check this out, <br /><br /><script src="https://gist.github.com/alstat/8fde183b0944c1044fb2.js"></script><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-r0Er7_ZoujQ/VAMhT7RP_HI/AAAAAAAAB10/DmBjiZ6yFmc/s1600/Image9.png" height="240" width="320" /></div><br /><h3>Color Management</h3>Since the array of pixels has three axes in its dimension, for example in our case is 1984 x 1488 x 3. The third axis is the slot for the three channels: Red, Green and Blue, or RGB. Hence, transforming the <code>color.mode</code> from <code>Color</code> to <code>Grayscale</code>, implies disjoining the three channels from single rendered frame (three channels for each pixel) to three separate array of pixels for red, green, and blue frames.<br /><br /><script src="https://gist.github.com/alstat/7c2348ec3131ae6a173f.js"></script><div class="datagrid"><table><thead><tr><th>Original</th><th>Red Channel</th></tr></thead><tfoot><tr><td colspan="3" style="text-align: center;"><div id="paging"><i>Table 5: Color Mode Transformation.</i></div></td></tr></tfoot><tbody><tr><td><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-LpJwYSJnnlY/VAPdM9pTZqI/AAAAAAAAB2M/GAAkfgyh-7s/s200/Image1.png" /></div></td><td><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://4.bp.blogspot.com/-bEumwca398k/VAPdUTsdwqI/AAAAAAAAB2c/VBWZAZONYsg/s200/Image10.png" /></div></td></tr><tr></tr></tbody><thead><tr><th>Green Channel</th><th>Blue Channel</th></tr></thead><tbody><tr><td><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://2.bp.blogspot.com/-4XZVeVpSX6Q/VAPdPQe74BI/AAAAAAAAB2Q/cAbSsxX_MBA/s200/Image10-g.png" /></div></td><td><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://1.bp.blogspot.com/-FoAUdUx_FQw/VAPdAG7KwqI/AAAAAAAAB2E/jCoAAG5IAuk/s200/Image10-b.png" /></div></td></tr></tbody></table></div><br />To revert the color mode, simply run<br /><br /><script src="https://gist.github.com/alstat/2e92358020609764e8a6.js"></script><h3>Filtering</h3>In this section, we will do smoothing/blurring using low-pass filter, and edge-detection using high-pass filter. In addition, we will also investigate median filter to remove noise.<br /><br /><div class="datagrid"><table><thead><tr><th>Low-Pass (Blur)</th></tr></thead><tfoot><tr><td style="text-align: center;"><div id="paging"><i>Table 6: Image Filtering.</i></div></td></tr></tfoot><tbody><tr><td><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://4.bp.blogspot.com/-4OrEcnvm3OU/VAcZC-_-ZrI/AAAAAAAAB3E/rIFQcOxqNPo/s320/Image11.png" /></div><div><script src="https://gist.github.com/alstat/8c0f1a2ed48383277f8f.js"></script></div></td></tr></tbody><thead><tr><th>High Pass</th></tr></thead><tbody><tr><td><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-UstcJqiIEGw/VAcfWdJmTfI/AAAAAAAAB3Q/Dae_SpFAo9Q/s320/Image12.png" /></div><div><script src="https://gist.github.com/alstat/1ef92750b21735e39366.js"></script></div></td></tr></tbody></table></div></div></div><br /><div class="datagrid"><table><thead><tr><th>Original</th><th>Filtered</th></tr></thead><tfoot><tr><td colspan="3" style="text-align: center;"><div id="paging"><i>Table 7: Median Filter.</i></div></td></tr></tfoot><tbody><tr><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://4.bp.blogspot.com/-dU4IZFWF7v4/VAh81coGXoI/AAAAAAAAB4U/0xrOTbWGW1Y/s1600/peppersalt.jpg" height="200" style="margin-left: auto; margin-right: auto;" width="200" /></td></tr><tr><td class="tr-caption" style="text-align: center;">From Google, Link <a href="http://my.fit.edu/~vkepuska/ece3552/esp_book/adsp/chap10/image_files/noisy_image/peppersalt.bmp" target="_blank">Here</a>.</td></tr></tbody></table><div class="separator" style="margin-left: 1em; margin-right: 1em; text-align: center;"></div></td><td><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" src="http://1.bp.blogspot.com/-42jV21UCWxQ/VAh9rfngXoI/AAAAAAAAB4c/uNanHSHrc9U/s1600/psfiltered.png" height="200" style="margin-left: auto; margin-right: auto;" width="200" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Output of <code>display(medFltr)</code></td></tr></tbody></table><div class="separator" style="margin-left: 1em; margin-right: 1em; text-align: center;"></div></td></tr></tbody></table></div><br /><script src="https://gist.github.com/alstat/d0630e5c6420fc6cad9a.js"></script>For comparison, I run median filter on first-neighborhood in Mathematica, and I got this <br /><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://4.bp.blogspot.com/-vQnyLYJZNQc/VAiC-oWPatI/AAAAAAAAB4s/9l63YV6ElOY/s1600/M10MedFilter.png" /></div>Clearly, Mathematica has better enhancement than R for this particular filter. But R has a good foundation already, as we witness with EBImage. There are still lots of interesting functions in the said package, that is worth exploring, I suggest you check that out.<br /><br />For the meantime, we will stop here, but hoping we can play more on this topic in the succeeding post.<br /><br /><h3>References</h3><ol><li><a href="http://en.wikipedia.org/wiki/Gamma_correction" target="_blank">Gamma Correction</a>. <i><a href="http://en.wikipedia.org/wiki/Main_Page" target="_blank">Wikipedia</a></i>. Retrieved August 31, 2014.</li><li>Gregoire Pau, Oleg Sklyar, Wolfgang Huber (2014). <i><a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CB8QFjAA&amp;url=http%3A%2F%2Fwww.bioconductor.org%2Fpackages%2Frelease%2Fbioc%2Fvignettes%2FEBImage%2Finst%2Fdoc%2FEBImage-introduction.pdf&amp;ei=GdgDVO2jC4HViwLegYG4Dg&amp;usg=AFQjCNEsZZ5NXZGjo_IkuvYR0g759ik6hA&amp;sig2=grKJQ70YXN-vdqZDb0RBVQ&amp;bvm=bv.74115972,d.cGE" target="_blank">Introduction to EBImage, an image processing and analysis toolkit for R</a></i>.</li></ol></div><div class="author">
  <img src="" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/">Alstatr</a> - check out <a href="http://alstatr.blogspot.com/">Analysis with Programming</a></i>
  </span>
</div>
