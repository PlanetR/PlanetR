---
title: "Python: Getting Started with Data Analysis"
kind: article
created_at: 2015-02-09 09:37:00 UTC
author: Alstatr
categories: 
tags: 
layout: post
---
<div dir="ltr" style="text-align: left;" trbidi="on"><a href="http://alstatr.blogspot.com" target = "_blank">Analysis with Programming</a> has recently been syndicated to <a href="http://planetpython.org" target = "_blank">Planet Python</a>. And as a first post being a contributing blog on the said site, I would like to share how to get started with data analysis on Python. Specifically, I would like to do the following: <br /><ol><li>Importing the data <ul><li>Importing CSV file both locally and from the web;</li></ul></li><li>Data transformation;</li><li>Descriptive statistics of the data;</li><li>Hypothesis testing <ul><li>One-sample t test;</li></ul></li><li>Visualization; and</li><li>Creating custom function.</li></ol><h3>Importing the data</h3>This is the crucial step, we need to import the data in order to proceed with the succeeding analysis. And often times data are in CSV format, if not, at least can be converted to CSV format. In Python we can do this using the following codes:<br /><br /><script src="https://gist.github.com/alstat/c460ddf86c7485a4839b.js"></script><a name='more'></a>To read CSV file locally, we need the <code>pandas</code> module which is a python data analysis library. The <code>read_csv</code> function can read data both locally and from the web.<br /><br /><h3>Data transformation</h3>Now that we have the data in the workspace, next is to do transformation. Statisticians and scientists often do this step to remove unnecessary data not included in the analysis. Let's view the data first:<br /><br /><script src="https://gist.github.com/alstat/89e95aa0504f25c3d4fd.js"></script>To R programmers, above is the equivalent of <code>print(head(df))</code> which prints the first six rows of the data, and <code>print(tail(df))</code> -- the last six rows of the data, respectively. In Python, however, the number of rows for head of the data by default is 5 unlike in R, which is 6. So that the equivalent of the R code <code>head(df, n = 10)</code> in Python, is <code>df.head(n = 10)</code>. Same goes for the tail of the data.<br /><br />Column and row names of the data are extracted using the <code>colnames</code> and <code>rownames</code> functions in R, respectively. In Python, we extract it using the <code>columns</code> and <code>index</code> attributes. That is,<br /><br /><script src="https://gist.github.com/alstat/92a80fb9b76c1bc0e5a6.js"></script>Transposing the data is obtain using the <code>T</code> method, <br /><br /><script src="https://gist.github.com/alstat/c7ca9cce05d8cf41a45f.js"></script>Other transformations such as sort can be done using <code>sort</code> attribute. Now let's extract a specific column. In Python, we do it using either <code>iloc</code> or <code>ix</code> attributes, but <code>ix</code> is more robust and thus I prefer it. Assuming we want the head of the first column of the data, we have <br /><br /><script src="https://gist.github.com/alstat/839451ab69658bccdbc8.js"></script>By the way, the indexing in Python starts with 0 and not 1. To slice the index and first three columns of the 11th to 21st rows, run the following<br /><br /><script src="https://gist.github.com/alstat/d2dae542c7edf12c0b23.js"></script>Which is equivalent to <code>print df.ix[10:20, ['Abra', 'Apayao', 'Benguet']]</code><br /><br />To drop a column in the data, say columns 1 (Apayao) and 2 (Benguet), use the <code>drop</code> attribute. That is, <br /><br /><script src="https://gist.github.com/alstat/9bd963e1ff5637b9e693.js"></script><code>axis</code> argument above tells the function to drop with respect to columns, if <code>axis = 0</code>, then the function drops with respect to rows.<br/><br /><h3>Descriptive Statistics</h3>Next step is to do descriptive statistics for preliminary analysis of our data using the <code>describe</code> attribute: <br /><br /><script src="https://gist.github.com/alstat/a3c6f2aa6e1af7179270.js"></script><h3>Hypothesis Testing</h3>Python has a great package for statistical inference. And that's the <a href="http://docs.scipy.org/doc/scipy/reference/stats.html" target = "_blank">stats</a> library of scipy. The one sample t-test is implemented in <code>ttest_1samp</code> function. So that, if we want to test the mean of the Abra's volume of palay production against the null hypothesis with 15000 assumed population mean of the volume of palay production, we have <br /><br /><script src="https://gist.github.com/alstat/e84461f482a3a778e8fe.js"></script>The values returned are tuple of the following values: <ul><li>t : float or array<br/>&nbsp;&nbsp;&nbsp;&nbsp;t-statistic</li><li>prob : float or array<br/>&nbsp;&nbsp;&nbsp;&nbsp;two-tailed p-value</li></ul>From the above numerical output, we see that the p-value = 0.2627 is greater than $\alpha=0.05$, hence there is no sufficient evidence to conclude that the average volume of palay production is not equal to 15000. Applying this test for all variables against the population mean 15000 volume of production, we have<br /><br /><script src="https://gist.github.com/alstat/2ac5ae476629eb5a21e5.js"></script>The first array returned is the t-statistic of the data, and the second array is the corresponding p-values.<br/><br/><h3>Visualization</h3>There are several module for visualization in Python, and the most popular one is the matplotlib library. To mention few, we have bokeh and seaborn modules as well to choose from. In my previous <a href="http://alstatr.blogspot.com/2014/03/python-numerical-description-of-data.html" target = "_blank">post</a>, I've demonstrated the matplotlib package which has the following graphic for box-whisker plot, <br /><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://4.bp.blogspot.com/-2aCr8bO_g0Y/VNgoNGm98DI/AAAAAAAACUs/UHQqEKaQ0Qw/s1600/myfigmat.png" height="395" width="400" /></div><script src="https://gist.github.com/alstat/ea3780959ac7b8a92a37.js"></script>Now plotting using pandas module can beautify the above plot into the theme of the popular R plotting package, the <a href="http://docs.ggplot2.org/current/index.html" target = "_blank">ggplot</a>. To use the ggplot theme just add one more line to the above code,<br /><br /><script src="https://gist.github.com/alstat/747394fc4e9ebafebab2.js"></script>And you'll have the following, <br /><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://1.bp.blogspot.com/-qw4PelZlGUI/VNguE_aJEqI/AAAAAAAACU8/hlFOCyDTLH4/s1600/myfigmatg.png" height="397" width="400" /></div>Even neater than the default matplotlib.pyplot theme. But in this post, I would like to introduce the seaborn module which is a statistical data visualization library. So that, we have the following <div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://2.bp.blogspot.com/-ejTdnGnRN-k/VM9_U3_DaSI/AAAAAAAACUI/7p3Qe7tAQEI/s1600/myfig3.png" height="397" width="400" /></div><script src="https://gist.github.com/alstat/57aeb24456ff6ebb9250.js"></script>Sexy boxplot, scroll down for more. <div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://1.bp.blogspot.com/-zs8Wwhavemw/VM9_60GFJPI/AAAAAAAACUQ/GYk0OMEsuoc/s1600/myfig4.png" height="392" width="400" /></div><script src="https://gist.github.com/alstat/01c1edd8cb6a8952e2c1.js"></script><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-Bctp-AJhTZk/VM91p1ZudjI/AAAAAAAACTY/-IOshqjmMcs/s1600/myfig1.png" height="390" width="400" /></div><script src="https://gist.github.com/alstat/1c23218afc7f57307918.js"></script><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-bGBNy69fnxU/VM96YB27hmI/AAAAAAAACT8/rMf2skmFZu0/s1600/myfig2.png" height="387" width="400" /></div><script src="https://gist.github.com/alstat/33bc4428309b2c7e392c.js"></script><div class="separator" style="clear: both; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-GbaXc_HkiAI/VM-B4K5AYjI/AAAAAAAACUc/lvUj_fTHGjU/s1600/myfig5.png" height="400" width="392" /></div><script src="https://gist.github.com/alstat/65832727c54f560413d2.js"></script><h3>Creating custom function</h3>To define a custom function in Python, we use the <code>def</code> function. For example, say we define a function that will  add two numbers, we do it as follows,<br/><br/><script src="https://gist.github.com/alstat/ba50893788cfc3a4cb0f.js"></script>By the way, in Python indentation is important. Use indentation for scope of the function, which in R we do it with braces <code>{...}</code>. Now here's an algorithm from my previous <a href="http://alstatr.blogspot.com/2014/01/python-and-r-is-python-really-faster.html" target = "_blank">post</a>, <ol style="text-align: left;"><li>Generate samples of size 10 from Normal distribution with $\mu$ = 3 and $\sigma^2$ = 5;</li><li>Compute the $\bar{x}$ and $\bar{x}\mp z_{\alpha/2}\displaystyle\frac{\sigma}{\sqrt{n}}$ using the 95% confidence level;</li><li>Repeat the process 100 times; then</li><li>Compute the percentage of the confidence intervals containing the true mean.</li></ol>Coding this in Python we have, <br /><br /><script src="https://gist.github.com/alstat/8725353.js"></script>Above code might be easy to read, but it's slow in replication. Below is the improvement of the above code, thanks to Python gurus, see <a href="http://alstatr.blogspot.com/2014/01/python-and-r-is-python-really-faster.html#disqus_thread" target = "_blank">comments</a> on my previous post.<br/><br/><script src="https://gist.github.com/alstat/8748774.js"></script><h3>Update</h3>For those who are interested in the ipython notebook of this article, please click <a href="http://nuttenscl.be/Python_Getting_Started_with_Data_Analysis.html" target = "_blank">here</a>. This article was converted to ipython notebook by of <a href="https://twitter.com/NuttensC" target="_blank">Nuttens Claude</a>.<br/><br/><h3>Data Source</h3><ul><li><a href="http://countrystat.bas.gov.ph/" target="_blank">Philippine Bureau of Agricultural Statistics</a></li></ul><h3>Reference</h3><ol><li><a href="http://pandas.pydata.org/pandas-docs/stable/" target = "_blank">Pandas</a>, <a href="http://docs.scipy.org/doc/" target = "_blank">Scipy</a>, and <a href="http://stanford.edu/~mwaskom/software/seaborn/" target = "_blank">Seaborn</a> Documentations.</li><li>Wes McKinney & PyData Development Team (2014). <i>pandas: powerful Python data analysis toolkit</i>.</li></ol></div><div class="author">
  <img src="" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/">Alstatr</a> - check out <a href="http://alstatr.blogspot.com/">Analysis with Programming</a></i>
  </span>
</div>
